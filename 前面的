import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;D
public class ConsoleAirplaneGame {

    private static final int CONSOLE_WIDTH = 60;
    private static final int CONSOLE_HEIGHT = 20;
    private static final char AIRPLANE_CHAR = 'A';
    private static final char BULLET_CHAR = '|';
    private static final char ENEMY_CHAR = 'E';
    private static final int AIRPLANE_SPEED = 1;
    private static final int BULLET_SPEED = 2;
    private static final int ENEMY_SPEED = 1;
    private static final int ENEMY_SPAWN_INTERVAL = 3000; // in milliseconds

    private static boolean gameRunning = true;
    private static int airplaneX;
    private static List<Integer> bulletsX;
    private static List<Integer> bulletsY;
    private static List<Integer> enemiesX;
    private static List<Integer> enemiesY;

    public static void main(String[] args) {
        initializeGame();

        Thread inputThread = new Thread(ConsoleAirplaneGame::handleInput);
        Thread gameThread = new Thread(ConsoleAirplaneGame::runGame);

        inputThread.start();
        gameThread.start();

        try {
            inputThread.join();
            gameThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static void initializeGame() {
        airplaneX = CONSOLE_WIDTH / 2;
        bulletsX = new ArrayList<>();
        bulletsY = new ArrayList<>();
        enemiesX = new ArrayList<>();
        enemiesY = new ArrayList<>();
    }

    private static void drawGame() {
        char[][] screen = new char[CONSOLE_HEIGHT][CONSOLE_WIDTH];

        // Clear screen
        for (int i = 0; i < CONSOLE_HEIGHT; i++) {
            for (int j = 0; j < CONSOLE_WIDTH; j++) {
                screen[i][j] = ' ';
            }
        }

        // Draw airplane
        screen[CONSOLE_HEIGHT - 1][airplaneX] = AIRPLANE_CHAR;

        // Draw bullets
        for (int i = 0; i < bulletsX.size(); i++) {
            int x = bulletsX.get(i);
            int y = bulletsY.get(i);
            if (y >= 0 && y < CONSOLE_HEIGHT) {
                screen[y][x] = BULLET_CHAR;
            }
        }

        // Draw enemies
        for (int i = 0; i < enemiesX.size(); i++) {
            int x = enemiesX.get(i);
            int y = enemiesY.get(i);
            if (y >= 0 && y < CONSOLE_HEIGHT) {
                screen[y][x] = ENEMY_CHAR;
            }
        }

        // Print the screen
        for (int i = 0; i < CONSOLE_HEIGHT; i++) {
            System.out.println(new String(screen[i]));
        }
    }

    private static void handleInput() {
        while (gameRunning) {
            try {
                TimeUnit.MILLISECONDS.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            try {
                if (System.in.available() > 0) {
                    int input = System.in.read();
                    if (input == KeyEvent.VK_LEFT) {
                        moveAirplane(-AIRPLANE_SPEED);
                    } else if (input == KeyEvent.VK_RIGHT) {
                        moveAirplane(AIRPLANE_SPEED);
                    } else if (input == KeyEvent.VK_SPACE) {
                        shootBullet();
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    private static void moveAirplane(int dx) {
        airplaneX += dx;
        // Check boundaries to prevent the airplane from flying out of the console
        airplaneX = Math.max(0, Math.min(airplaneX, CONSOLE_WIDTH - 1));
    }

    private static void shootBullet() {
        bulletsX.add(airplaneX);
        bulletsY.add(CONSOLE_HEIGHT - 2);
    }

    private static void moveBullets() {
        for (int i = 0; i < bulletsY.size(); i++) {
            int y = bulletsY.get(i);
            y -= BULLET_SPEED;
            if (y < 0) {
                bulletsX.remove(i);
                bulletsY.remove(i);
                i--;
            } else {
                bulletsY.set(i, y);
            }
        }
    }

    private static void spawnEnemy() {
        int x = (int) (Math.random() * CONSOLE_WIDTH);
        enemiesX.add(x);
        enemiesY.add(-1);
    }

    private static void moveEnemies() {
        for (int i = 0; i < enemiesY.size(); i++) {
            int y = enemiesY.get(i);
            if (y == -1) {
                try {
                    TimeUnit.MILLISECONDS.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                enemiesY.set(i, 0);
            } else if (y >= 0 && y < CONSOLE_HEIGHT) {
                y += ENEMY_SPEED;
                enemiesY.set(i, y);
            } else {
                enemiesX.remove(i);
                enemiesY.remove(i);
                i--;
            }
        }
    }

    private static void checkCollisions() {
        for (int i = 0; i < bulletsX.size(); i++) {
            int bulletX = bulletsX.get(i);
            int bulletY = bulletsY.get(i);

            for (int j = 0; j < enemiesX.size(); j++) {
                int enemyX = enemiesX.get(j);
                int enemyY = enemiesY.get(j);

                if (bulletY == enemyY && bulletX == enemyX) {
                    bulletsX.remove(i);
                    bulletsY.remove(i);
                    enemiesX.remove(j);
                    enemiesY.remove(j);
                    i--;
                    break;
                }
            }
        }

        for (int i = 0; i < enemiesX.size(); i++) {
            int enemyX = enemiesX.get(i);
            int enemyY = enemiesY.get(i);

            if (enemyY == CONSOLE_HEIGHT - 1 && enemyX == airplaneX) {
                gameRunning = false;
                break;
            }
        }
    }

    private static void runGame() {
        long lastEnemySpawnTime = 0;
        while (gameRunning) {
            moveBullets();
            moveEnemies();
            checkCollisions();
            drawGame();

            // Spawn new enemy at a fixed interval
            long currentTime = System.currentTimeMillis();
            if (currentTime - lastEnemySpawnTime >= ENEMY_SPAWN_INTERVAL) {
                spawnEnemy();
                lastEnemySpawnTime = currentTime;
            }

            try {
                TimeUnit.MILLISECONDS.sleep(100); // Adjust this value to control the game's speed
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Game Over!");
    }
}
